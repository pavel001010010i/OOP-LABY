Вопросы
1.Расскажите как генерируется исключение. 
Исключение представляет событие, которое возникает при выполнении программы и нарушает ее нормальной ход. Например, при передаче файла по сети может оборваться сетевое подключение, и в результате чего может быть сгенерировано исключение. Если исключение не обработано, то программа падает и прекращает свою работу. Поэтому при возникновении исключений их следует обрабатывать.

2. Расскажите методику обработки исключений. 
Для обработки исключений применяется конструкция try..catch..finally. В блок try помещаются те действия, которые потенциально могут вызвать исключение (например, передача файла по сети, открытие файла и т.д.). Блок catch перехватывает возникшее исключение и обрабатывает его. Блок finally выполняет некоторые завершающие действия.

3. Какое ключевое слово служит для обозначения блока кода, в котором можно генерировать исключение?
В блок try помещаются те действия, которые потенциально могут вызвать исключение (например, передача файла по сети, открытие файла и т.д.). 

 4. Какие ключевые слова используются для обработки и генерации исключений? Расскажите об механизме обработке исключения? 
Catch перехватывает возникшее исключение и обрабатывает его.
После оператора catch в скобках помещается параметр, который представляет тип исключения. Из этого параметра можно получить информацию о произошедшем исключении.
Блок finally является необязательным, его можно опустить. Блок catch также может отсутствовать, однако обязательно должен быть блок try и как минимум один из блоков: либо catch, либо finally. Также конструкция может содержать несколько блоков catch для обработки каждого типа исключения, которое может возникнуть.
Блок catch выполняется, если только возникло исключение. Блок finally выполняется в любом случае, даже если нет исключения.
5. Что будет, если в программе нет предложения catch, способного обработать исключение? 
Прекращение работы программы , а также сообщение об исключении.
6. Что такое фильтры исключения? Приведите пример 
В C# 6.0 (Visual Studio 2015) была добавлена такая функциональность, как фильтры исключений. Они позволяют обрабатывать исключения в зависимости от определенных условий. Фильтр исключения позволяет указать дополнительные условия, при которых используется обработчик исключения. Эти условия принимают форму булева выражения, перед которым ставится ключевое слово when.
int x = 1;
int y = 0;
 
try
{
    int result = x / y;
}
catch(Exception ex) when (y==0)
{
    Console.WriteLine("y не должен быть равен 0");
}
catch(Exception ex)
{
    Console.WriteLine(ex.Message);
}

7. Могут ли исключения быть вложенными? 
try могут быть вложенными.

8. Какой синтаксис нужно использовать в C# для отлова любого возможного исключения?
catch (Exception ex); // это общий обработчик исключений
 
9. Чем следует руководствоваться при размещении обработчиков исключения?
Свойства и правила
 > try могут быть вложенные 
> более специфичные исключения обрабатываются первыми 
> Свои классы исключений должны наследоваться от System.Exeption или System.ApplicationException
 > может иметь одну конструкцию catch без аргументов ( нежелатьельно) 
> finally выполняется всегда 
> ( не выполняется в случае выброса StackOverflowException или System.exit(0)) 
> Может быть трансляция исключения
 > при использовании инструкций lock, using и foreach блоки try/finally создаются автоматически > Генерация исключений в finally (нежелательно - код восстановления или очистки будет выполнен не полностью)
 10. Что будет выведено на консоль в результате выполнения фрагмента листинга? 
 
Ответ:
It is OK.
11. Как повторно сгенерировать то же самое исключение в блоке обработчике catch? 
Повторная генерация исключения - создание нового объекта посредством повторного использования старого с помощью оператора throw без параметров:
Ststic void Method(int x, int y)
{
  try
{
	int result = x/y;
}
catch(DivideByZeroException)
{
  	Console.WriteLine(“Деление на ноль!”);
	throw;
}
}
При повторном вызове перехваченного исключения с помощью ключевого слова throw удаления из стека информации о начальной точке не происходит
12.Какие методы содержаться в классе Exception? Где и как их можно использовать?
Некоторые свойства класса Exception:
•	Helplink: хранит адрес интернет-ресурса, на котром можно найти всю информацию об ошибке
•	InnerException: объект класса Exception, хранит информацию об исключении, которое послужило причиной текущего исключения
•	Message: хранит сообщение об исключении, текст ошибки
•	Source: хранит имя объекта или сборки, которое вызвало исключение
•	StackTrace: возвращает строковое представление стека вызывов, которые привели к возникновению исключения
•	TargetSite: возвращает метод, в котором и было вызвано исключение
•	class Program
•	    {
•	        static void Main(string[] args)
•	        {
•	            try
•	            {
•	                Person p = new Person();
•	                p.Age = 17;
•	            }
•	            catch (Exception ex)
•	            {
•	                Console.WriteLine("Ошибка: " + ex.Message);
•	                Console.WriteLine("Метод: " + ex.TargetSite); // Void set_Age(Int32)
•	                 
•	            }
•	            Console.ReadLine();
•	        }
•	    }
•	 
•	    class Person
•	    {
•	        private string name;
•	        public string Name 
•	        {
•	            get { return name; }
•	            set { name = value; }
•	        }
•	        private int age;
•	        public int Age
•	        {
•	            get { return age; }
•	            set
•	            {
•	                if (value < 18)
•	                {
•	                    throw new Exception("Лицам до 18 регистрация запрещена");
•	                }
•	                else
•	                {
•	                    age = value;
•	                }
•	            }
•	        }
•	    }

public class Exception : ISerializable, _Exception 
{ // Общедоступные конструкторы 
public Exception(string message, Exception innerException); 
public Exception(string message); public Exception(); 
// Методы 
public virtual Exception GetBaseException() ;
 public virtual void GetObjectData(Serializationlnfо info, StreamingContext context); 
// Свойства 
public virtual IDictionary Data { get; } 
public virtual string HelpLink { get; set; } 
public Exception InnerException { get; }
 public virtual string Message { get; } 
public virtual string Source { get; set; }
 public virtual string StackTrace { get; } 
public MethodBase TargetSite { get; } ... }