В C# коллекция представляет собой совокупность объектов.
Главное преимущество коллекций заключается в том, что они стандартизируют обработку групп объектов в программе.

Перечислите стандартные коллекции NET Framework. 
Dictionary<TKey,TValue>
List<T>
Queue<T>
SortedList<TKey,TValue>
Stack<T>
2. Поясните принцип работы коллекции: 
a) Stack<T> --Представляет коллекцию объектов, которая обслуживается в обратном порядке (LIFO).
b) Queue<T> -- Представляет коллекцию объектов, которая обслуживается в порядке поступления (FIFO).
c) HashSet<T> -- Класс предоставляет высокопроизводительные операции над множествами.
d) List<T> --Представляет список объектов, доступных по индексу. Предоставляет методы для поиска по списку, его сортировки и изменения.
e) Dictionary<Tkey, TValue> -- Предоставляет коллекцию пар «ключ-значение», которые упорядочены по ключу.
f) LinkedList<T> -- это связанный с общим назначением список. Он поддерживает перечисления и реализует интерфейс ICollection
g) SortedDictionary<TKey, TValue> -- представляет дерево бинарного поиска, в котором все элементы отсортированы на основе ключа. Тип ключа должен реализовать интерфейс IComparable<TKey>
h) SortedList<TKey, TValue> -- Представляет коллекцию пар "ключ-значение", упорядоченных по ключу на основе реализации IComparer<T>.
i) SortedSet<T> -- Коллекция, содержащая только отличающиеся элементы, называется множеством (set).SortedSet<T> элементы упорядочены.

3. Охарактеризуйте необобщенные, специальные, с поразрядной организацией, обобщенные и параллельные коллекции.
Необобщенные коллекции
Реализуют ряд основных структур данных, включая динамический массив, стек, очередь, а также словари, в которых можно хранить пары "ключ-значение". В отношении необобщенных коллекций важно иметь в виду следующее: они оперируют данными типа object. Таким образом, необобщенные коллекции могут служить для хранения данных любого типа, причем в одной коллекции допускается наличие разнотипных данных. Очевидно, что такие коллекции не типизированы, поскольку в них хранятся ссылки на данные типа object. Классы и интерфейсы необобщенных коллекций находятся в пространстве имен System.Collections.

Специальные коллекции
Оперируют данными конкретного типа или же делают это каким-то особым образом. Например, имеются специальные коллекции для символьных строк, а также специальные коллекции, в которых используется однонаправленный список. Специальные коллекции объявляются в пространстве имен System.Collections.Specialized.

Поразрядная коллекция
В прикладном интерфейсе Collections API определена одна коллекция с поразрядной организацией — это BitArray. Коллекция типа BitArray поддерживает поразрядные операции, т.е. операции над отдельными двоичными разрядами, например И, ИЛИ, исключающее ИЛИ, а следовательно, она существенно отличается своими возможностями от остальных типов коллекций. Коллекция типа BitArray объявляется в пространстве имен System.Collections.

Обобщенные коллекции
Обеспечивают обобщенную реализацию нескольких стандартных структур данных, включая связные списки, стеки, очереди и словари. Такие коллекции являются типизированными в силу их обобщенного характера. Это означает, что в обобщенной коллекции могут храниться только такие элементы данных, которые совместимы по типу с данной коллекцией. Благодаря этому исключается случайное несовпадение типов. Обобщенные коллекции объявляются в пространстве имен System.Collections.Generic.

Параллельные коллекции
Поддерживают многопоточный доступ к коллекции. Это обобщенные коллекции, определенные в пространстве имен System.Collections.Concurrent.

4. Какие интерфейсы используются в коллекциях C#? 
IEnumerable<T>
ICollection<T>	
IList<T>	
ISet<T>	
IDictionary<TKey, TValue>	
ILookup<TKey, TValue>	
IComparer<T>	
IEqualityComparer<T>	
IProducerConsumerCollection<T>	

5. Для чего используется IComparable?
Для сортировки наборов сложных объектов применяется интерфейс IComparable. Он имеет всего один метод:

public interface IComparable
{
    int CompareTo(object o);
} 
6.  Что содержит интерфейс IEnumerator или обобщенный интерфейс IEnumerator<T>? Где и как его можно использовать? 
Предоставляет методы, позволяющие получать содержимое коллекции по очереди.
Интерфейс IEnumerable необходим, когда с коллекцией используется оператор foreach.
 Этот интерфейс определяет метод GetEnumerator(), возвращающий перечислитель, который реализует IEnumerator.

7. Что такое наблюдаемая коллекция? Где и каким образом ее можно использовать?
В случае если нужна информация о том, когда элементы коллекции удаляются или добавляются, можно использовать класс ObservableCollection<T>.
Этот класс был определен для WPF и предназначен для того, чтобы пользовательский интерфейс мог получать информацию об изменениях коллекции.
По этой причине он включен в сборку WindowsBase, следовательно, на нее необходимо сослаться. Пространство имен этого класса — System.Collections.ObjectModel.
