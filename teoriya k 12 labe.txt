1. Что такое Рефлексия?
Рефлексия представляет собой процесс выявления типов во время выполнения приложения.
Каждое приложение содержит набор используемых классов, интерфейсов, а также их методов, свойств и прочих кирпичиков, из которых складывается приложение. 
И рефлексия как раз и позволяет определить все эти составные элементы приложения.

2. Какие есть способы получения объекта типа Type. Приведите три способа получения типа.
Чтобы управлять типом и получать всю информацию о нем, нам надо сперва получить данный тип. Это можно сделать тремя способами:
 с помощью ключевого слова typeof,
 с помощью метода GetType() класса Object и
 применяя статический метод Type.GetType().

1)Type myType = typeof(User);
2) User user = new User("Tom", 30);
   Type myType = user.GetType();
3) Type myType = Type.GetType("TestConsole.User", false, true);

3. Охарактеризуйте классы из пространства имен System.Reflection.
Assembly: класс, представляющий сборку и позволяющий манипулировать этой сборкой
AssemblyName: класс, хранящий информацию о сборке
MemberInfo: базовый абстрактный класс, определяющий общий функционал для классов EventInfo, FieldInfo, MethodInfo и PropertyInfo
EventInfo: класс, хранящий информацию о событии
FieldInfo: хранит информацию об определенном поле типа
MethodInfo: хранит информацию об определенном методе
PropertyInfo: хранит информацию о свойстве
ConstructorInfo: класс, представляющий конструктор
Module: класс, позволяющий получить доступ к определенному модулю внутри сборки
ParameterInfo: класс, хранящий информацию о параметре метода

4. Как можно использовать класс System.Type? Перечислите его свойства и методы.
Класс System.Type представляет изучаемый тип, инкапсулируя всю информацию о нем. 
С помощью его свойств и методов можно получить эту информацию.

Метод FindMembers() возвращает массив объектов MemberInfo данного типа
Метод GetConstructors() возвращает все конструкторы данного типа в виде набора объектов ConstructorInfo
Метод GetEvents() возвращает все события данного типа в виде массива объектов EventInfo
Метод GetFields() возвращает все поля данного типа в виде массива объектов FieldInfo
Метод GetInterfaces() получает все реализуемые данным типом интерфейсы в виде массива объектов Type
Метод GetMembers() возвращает все члены типа в виде массива объектов MemberInfo
Метод GetMethods() получает все методы типа в виде массива объектов MethodInfo
Метод GetProperties() получает все свойства в виде массива объектов PropertyInfo
Свойство IsAbstract возвращает true, если тип является абстрактным
Свойство IsArray возвращает true, если тип является массивом
Свойство IsClass возвращает true, если тип представляет класс
Свойство IsEnum возвращает true, если тип является перечислением
Свойство IsInterface возвращает true, если тип представляет интерфейс

5. Как динамически загрузить сборку в приложение?
При создании приложения мы уже определяем набор сборок, которые будут приложением использоваться.
Однако может потребоваться динамически загружать другие сборки.

Для управления сборками в пространстве имен System.Reflection имеется класс Assembly.
С его помощью можно загружать сборку, исследовать ее.

Чтобы динамически загрузить сборку в приложение, 
надо использовать статические методы Assembly.LoadFrom() или Assembly.Load().

Метод LoadFrom() принимает в качестве параметра путь к сборке. 
Например, исследуем сборку на наличие в ней различных типов:

Assembly asm = Assembly.LoadFrom("TestConsole.exe");
 
    Console.WriteLine(asm.FullName);
    // получаем все типы из сборки TestConsole.exe
    Type[] types = asm.GetTypes();
    foreach(Type t in types)
    {
        Console.WriteLine(t.Name);
    }

6. Что такое позднее (раннее) связывание?